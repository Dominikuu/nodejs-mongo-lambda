service: ShoplineShoppingCart

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  profile: default
  lambdaHashingVersion: '20201221'
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "apigateway:GET"
      Resource:
        - "arn:aws:apigateway:${self:provider.region}::/restapis*"

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-aws-documentation
  - serverless-stack-output

package:
  include:
    - src/**/!(*.spec).js
    - .env
  # exclude:
  #   - node_modules/**/*

functions:
  getSwaggerJson:
    handler: src/swagger/swagger.getSwaggerJson
    description: Returns the Swagger documentation of the API in JSON format.

    environment:
      REGION_NAME: ${self:provider.region}
      REST_API_NAME: ${self:service}
      STAGE_NAME: ${self:provider.stage}
      API_INFO_VERSION: ${file(./swagger/documentation.yml):api.info.version}
      API_INFO_TITLE: ${file(./swagger/documentation.yml):api.info.title}

    events:
      - http:
          path: swagger.json
          method: get
          cors: true

  getHealthCheck:
    handler: src/health/health.getHealthCheck
    description: Returns the result of a quick health check of the API.

    events:
      - http:
          path: health/check
          method: get
          cors: true
          documentation:
            summary: Returns the result of a quick health check of the API.
            tags:
              - Health
            description: Returns the result of a quick health check of the API.
            methodResponses:
              - statusCode: '200'
                description: Returned when the operation is completed successfully.
                responseModels:
                  "application/json": GetHealthCheck
              - ${file(./swagger/error-responses/internal-server-error.yml)}

  getHealthCheckDetailed:
    handler: src/health/health.getHealthCheckDetailed
    description: Returns the result of a detailed health check of the API.
    events:
      - http:
          path: health/detailed
          method: get
          cors: true
          documentation:
            summary: Returns the result of a detailed health check of the API.
            tags:
              - Health
            description: Returns the result of a detailed health check of the API.
            methodResponses:
              - statusCode: '200'
                description: Returned when the operation is completed successfully.
                responseModels:
                  "application/json": GetHealthCheckDetailed
              - ${file(./swagger/error-responses/internal-server-error.yml)}

  createProduct:
    handler: src/product/product.createProduct
    description: Create new product.
    events:
      - http:
          path: product
          method: post
          cors: true
          documentation:
            summary: Create new user.
            tags:
              - Product
            description: Create new Product.
            requestModels:
              application/json: CreateProductRequest
            methodResponses:
              - statusCode: '200'
                description: Returned when the operation is completed successfully.
                responseModels:
                  "application/json": CreateProductResponse
              - ${file(./swagger/error-responses/bad-request.yml)}
              - ${file(./swagger/error-responses/forbidden.yml)}
              - ${file(./swagger/error-responses/not-found.yml)}
              - ${file(./swagger/error-responses/internal-server-error.yml)}
  deleteProduct:
    handler: src/product/product.deleteProduct
    description: Delete specific product.
    events:
      - http:
          path: product/{id}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                id: true
          documentation:
            summary: Delete specific product.
            tags:
              - Product
            description: Delete specific product.
            pathParams:
              - name: id
                description: The unique identifier of the product to delete.
            methodResponses:
              - statusCode: '200'
                description: Returned when the operation is completed successfully.
                responseModels:
                  "application/json": DeleteProductResponse
              - ${file(./swagger/error-responses/bad-request.yml)}
              - ${file(./swagger/error-responses/forbidden.yml)}
              - ${file(./swagger/error-responses/not-found.yml)}
              - ${file(./swagger/error-responses/internal-server-error.yml)}

  createUser:
    handler: src/user/user.createUser
    description: Create new user.
    events:
      - http:
          path: user
          method: post
          cors: true
          documentation:
            summary: Create new user.
            tags:
              - User
            description: Create new user..
            requestModels:
              application/json: CreateUserRequest
            methodResponses:
              - statusCode: '200'
                description: Returned when the operation is completed successfully.
                responseModels:
                  "application/json": CreateUserResponse
              - ${file(./swagger/error-responses/bad-request.yml)}
              - ${file(./swagger/error-responses/forbidden.yml)}
              - ${file(./swagger/error-responses/not-found.yml)}
              - ${file(./swagger/error-responses/internal-server-error.yml)}
  deleteUser:
    handler: src/user/user.deleteUser
    description: Delete specific user.
    events:
      - http:
          path: user/{id}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                id: true
          documentation:
            summary: Delete specific user.
            tags:
              - User
            description: Delete specific user..
            pathParams:
              - name: id
                description: The unique identifier of the user to delete.
            methodResponses:
              - statusCode: '200'
                description: Returned when the operation is completed successfully.
                responseModels:
                  "application/json": DeleteUserResponse
              - ${file(./swagger/error-responses/bad-request.yml)}
              - ${file(./swagger/error-responses/forbidden.yml)}
              - ${file(./swagger/error-responses/not-found.yml)}
              - ${file(./swagger/error-responses/internal-server-error.yml)}
  getOrder:
    handler: src/order/order.getOrder
    description: Returns a single order.
    events:
      - http:
          path: order/{id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true
          documentation:
            summary: Get a order.
            tags:
              - Order
            description: Returns the specified order.
            pathParams:
              - name: id
                description: The unique identifier of the order to retrieve.
            methodResponses:
              - statusCode: '200'
                description: Returned when the operation is completed successfully.
                responseModels:
                  "application/json": GetOrderResponse
              - ${file(./swagger/error-responses/bad-request.yml)}
              - ${file(./swagger/error-responses/forbidden.yml)}
              - ${file(./swagger/error-responses/not-found.yml)}
              - ${file(./swagger/error-responses/internal-server-error.yml)}
  listOrders:
    handler: src/order/order.listOrders
    description: Returns whole orders.
    events:
      - http:
          path: orders
          method: get
          cors: true
          documentation:
            summary: list all orders
            tags:
              - Orders
            description: Returns the whole orders.
            methodResponses:
              - statusCode: '200'
                description: Returned when the operation is completed successfully.
                responseModels:
                  "application/json": ListOrderResponse
              - ${file(./swagger/error-responses/bad-request.yml)}
              - ${file(./swagger/error-responses/forbidden.yml)}
              - ${file(./swagger/error-responses/not-found.yml)}
              - ${file(./swagger/error-responses/internal-server-error.yml)}
  createOrder:
    handler: src/order/order.createOrder
    description: Create an Order
    events:
      - http:
          path: order
          method: post
          cors: true
          documentation:
            summary: Create an order.
            tags:
              - Order
            description: Returns the specified id.
            requestModels:
              application/json: CreateOrderRequest
            methodResponses:
              - statusCode: '200'
                description: Returned when the operation is completed successfully.
                responseModels:
                  "application/json": CreateOrderResponse
              - ${file(./swagger/error-responses/bad-request.yml)}
              - ${file(./swagger/error-responses/forbidden.yml)}
              - ${file(./swagger/error-responses/not-found.yml)}
              - ${file(./swagger/error-responses/internal-server-error.yml)}

custom:
  documentation: ${file(./swagger/documentation.yml)}
  output:
    file: .serverless/output.json
